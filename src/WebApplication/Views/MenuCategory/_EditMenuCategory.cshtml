@model WebApplication.Models.MenuCategoryViewModel


<div class="modal-dialog modal-lg">
    @using (Ajax.BeginForm("Edit", "MenuCategory", FormMethod.Post,
            new AjaxOptions
            {
                InsertionMode = InsertionMode.Replace,
                HttpMethod = "POST",
                UpdateTargetId = "list-of-people",

            }, new { Class = "form-horizontal", enctype = "multipart/form-data", id = "quickForm"  }))
    {
        @Html.ValidationSummary()
        @Html.AntiForgeryToken()

        @Html.HiddenFor(model => model.Image);

        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Edit Menu Category</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

            <div class="modal-body">
                <div class="form-group row">
                    @Html.LabelFor(model => model.Name, new { @class = "col-sm-2 col-form-label" })
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control col-sm-10" } })
                </div>

                <div class="form-group row">
                    @Html.LabelFor(model => model.DisplayName, new { @class = "col-sm-2 col-form-label" })
                    @Html.EditorFor(model => model.DisplayName, new { htmlAttributes = new { @class = "form-control col-sm-10" } })
                </div>

                <div class="form-group row">
                    @Html.LabelFor(model => model.Details, new { @class = "col-sm-2 col-form-label" })
                    @Html.EditorFor(model => model.Details, new { htmlAttributes = new { @class = "form-control col-sm-10" } })
                </div>

                <div class="form-group row">
                    @Html.LabelFor(model => model.Status, new { @class = "col-sm-2 col-form-label" })
                    @Html.EnumDropDownListFor(model => model.Status, "--Select Status--", new { @class = "form-control col-sm-6" })
                    @if (@Model.StatusId == "2")
                    {
                        <span>Actieve</span>
                    }
                    else
                    {
                        <span>Inactieve</span>
                    }
                </div>

                
                <div class="form-group row">
                    @Html.LabelFor(model => model.Image, new { @class = "col-sm-2 col-form-label" })

                    <div class="input-group col-sm-10">
                        <div class="custom-file">
                            <input type="file" class="custom-file-input" name="File" id="File">
                            <label class="custom-file-label" for="File">Choose Image</label>
                        </div>
                    </div>

                </div>
                <img src="@Href("~/ImageStorage/MenuCategory/")@Model.Image" style="width: 240px; height: 240px;" class="img-responsive" />
            </div>

            <div class="modal-footer justify-content-between">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="submit" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    }
</div>


@section Scripts {

    <script type="text/javascript">

        $(document).ready(function () {

             $.validator.addMethod('selectNone', function (value, element) {
                return this.optional(element) || value != 0;
            }, "Status is required.");
            $('#quickForm').validate({
                rules: {
                    Name: {
                        required: true,
                    },
                    DisplayName: {
                        required: true,
                    },
                    Details: {
                        required: true,
                    },
                    Status: {
                        selectNone: true,
                    },
                    File: {
                        required: true,
                        accept:"jpg,png,jpeg,gif"
                    }
                },
                messages: {
                    Name: {
                        required: "Please provide Name"
                    },
                    DisplayName: {
                        required: "Please provide DisplayName"
                    },
                    Details: {
                        required: "Please provide Details"
                    },
                    Status: {
                        required: "Please provide Status"
                    },
                    File: {
                        required: "Select Image",
                        accept: "Only image type jpg/png/jpeg/gif is allowed"
                    }
                },
                errorElement: 'span',
                errorPlacement: function (error, element) {
                    error.addClass('invalid-feedback');
                    element.closest('.form-group').append(error);
                },
                highlight: function (element, errorClass, validClass) {
                    $(element).addClass('is-invalid');
                },
                unhighlight: function (element, errorClass, validClass) {
                    $(element).removeClass('is-invalid');
                }
            });
        });
    </script>
}
